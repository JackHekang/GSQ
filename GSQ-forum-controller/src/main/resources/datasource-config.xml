<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/context
     			http://www.springframework.org/schema/context/spring-context-3.0.xsd
     			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <context:property-placeholder location="classpath:sys-config.properties"/>

    <!-- 配置数据库连接 -->
    <bean id="baseDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.druid.driver-class}"/>
        <property name="url" value="${jdbc.druid.driver-url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.druid.connection-initial-size}"/>
        <property name="minIdle" value="${jdbc.druid.connection-minimum-size}"/>
        <property name="maxActive" value="${jdbc.druid.connection-maximum-size}"/>
        <property name="maxWait" value="${jdbc.druid.connection-maxwait-time}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.druid.connection-maxactive-time}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.druid.connection-minlive-time}"/>
        <property name="validationQuery" value="${jdbc.druid.connection-test-sql}"/>
        <property name="testWhileIdle" value="${jdbc.druid.test-while-idle}"/>
        <property name="testOnBorrow" value="${jdbc.druid.test-on-borrow}"/>
        <property name="testOnReturn" value="${jdbc.druid.test-on-return}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${jdbc.druid.pool-prepared-statements}"/>
        <!-- 数据库密码是否加密 -->
        <property name="connectionProperties" value="config.decrypt=${jdbc.druid.config.decrypt}"/>
    </bean>

    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="baseDataSource"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- 映射sql xml路径 -->
        <property name="mapperLocations"
                  value="classpath*:com/sixtyrobbers/GSQ/fourm/dao/mybatis/*.xml"></property>
        <property name="dataSource" ref="baseDataSource"/>
    </bean>
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.sixtyrobbers.GSQ.fourm.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="baseDataSource"/>
    </bean>

    <bean id="configTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"></property>
    </bean>
</beans>